<File version="2">
  <FileID>0b9995ff-5c92-46dd-a250-9b186ebb4b45</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADR/SURBVHhe7d0HdFRlwsZx3P3cFdddu2LFXlZF
VJqAlACCghW7iFJUFFFQVERxBaT3LqiIBaVKD4EkEBISEhIglITQQmihl4RewvO9782EBXdUuAwh
mfv/n/M7tBSYXc/73MllKEJERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREREREREREREREREREREREREREREREREREwVy3okXPi3jhhRciOnXu
FvHll50i2gMAgELly46dzRneMeLeEndHmLPd+uPO+/vf41u1bqPZ85crZc0OLcnYDgAAChl7hi/O
2KZJ06JUrmxZ+Y753++5556LiJm3THOWZmrGvJUAAKCQmjl/lZJX79C3w4b/+QDo2rVHRNr6LM1c
sEqzktMBAPCc6NMQiPcP1MewEpZuVFTc/D8fAB07d45YviHbeaeYhauPk/E7jn8bAAAKt9jFGZrp
XEGvcL49WTOSVhx7f/ut/bG/t/s9eZ9v9qIM52PYc/iUP4Z5+1kL0o/9HqzEZZsUPiv+JAZAp9wB
EL1wjfObmL3IfLvYMB9k9sJV5vsbFL1km2KM2SnbzCdZ63s7AAAKt7iUtZoUlayRk+M0OjT+lIya
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
xAAAAMCDGAAAAHgQAwAAAA9iAAAA4EEMAAAAPIgBAACABzEAAADwIAYAAAAexAAAAMCDGAAAAHgQ
AwAAAA9iAAAA4EEMAAAAPIgBAACABzEAAADwIAYAAAAexAAAAMCDGAAAAHgQAwAAAA9iAAAA4EEM
AAAAPIgBAACABzEAAADwIAYAAAAexAAAAMCDGAAAAHgQAwAAAA9iAAAA4EEMAAAAPIgBAACABzEA
AADwIAYAAAAexAAAAMCDGAAAAHgQAwAAAA9iAAAA4EEBGQDbdu7S7uzcDwYAAAq+PebcznA7AJaa
AbDUDID0jVnOB7FLAgAAFHz23F6+Idu5kHc9AFLNerALAgAAFB728Lfn+EkPgM6du0Zm5ci8Q47z
TgAAoPDavF+Kn5fy5wOgZcuPY5MWppm1MN9ZDAAAoPCKn7dEo8dO/PMBQERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERESFsyJF/h86QGO8FGHsyQAAAABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">1012, 569</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="Load">fadeIn_Load</Event>
    <Object type="System.Windows.Forms.DataVisualization.Charting.Chart, System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="chartDiskSpace" children="Controls">
      <Property name="BackGradientStyle">TopBottom</Property>
      <Property name="ChartAreas">
        <Item type="System.Windows.Forms.DataVisualization.Charting.ChartArea, System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
      </Property>
      <Property name="Location">255, 113</Property>
      <Property name="Name">chartDiskSpace</Property>
      <Property name="Series">
        <Item type="System.Windows.Forms.DataVisualization.Charting.Series, System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
      </Property>
      <Property name="Size">259, 227</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">chart1</Property>
      <Property name="Titles">
        <Item type="System.Windows.Forms.DataVisualization.Charting.Title, System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
      </Property>
      <Event name="VisibleChanged">chartDiskSpace_VisibleChanged</Event>
      <Serialize>
        <Chart Size="259, 227" BackGradientStyle="TopBottom">
          <Series>
            <Series Name="Disk Space" Legend="Legend1" ChartType="Pie" ChartArea="ChartArea1" CustomProperties="DrawingStyle=Cylinder, PieDrawingStyle=Concave" IsVisibleInLegend="False" />
          </Series>
          <Titles>
            <Title DockedToChartArea="ChartArea1" IsDockedInsideChartArea="False" Name="Title1" Text="Disk Space" Alignment="TopCenter" />
          </Titles>
          <ChartAreas>
            <ChartArea Name="ChartArea1">
              <AxisY Title="Disk Space (MB)" />
              <AxisX Title="Disk" />
              <Area3DStyle Enable3D="True" />
            </ChartArea>
          </ChartAreas>
        </Chart>
      </Serialize>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerFadeIn">
    <Event name="Tick">timerFadeIn_Tick</Event>
  </Object>
  <Code><![CDATA[
$form1_Load={
	#TODO: Initialize Form Controls here
	
}

$chartDiskSpace_VisibleChanged={
	if($this.Visible)
	{
		Load-DiskChart $this
	}
}

#region Control Helper Functions
function Load-Chart
{
<#
	.SYNOPSIS
		This functions helps you plot points on a chart

	.DESCRIPTION
		Use the function to plot points on a chart or add more charts to a chart control

	.PARAMETER  ChartControl
		The Chart Control you when to add points to

	.PARAMETER  XPoints
		Set the X Axis Points. These can be strings or numerical values.

	.PARAMETER  YPoints
		Set the Y Axis Points. These can be strings or numerical values.
	
	.PARAMETER  XTitle
		Set the Title for the X Axis.

	.PARAMETER  YTitle
		Set the Title for the Y Axis.
	
	.PARAMETER  Title
		Set the Title for the chart.
	
	.PARAMETER  ChartType
		Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum

	.PARAMETER SeriesIndex
		Set the settings of a particular Series and corresponding ChartArea

	.PARAMETER TitleIndex
		Set the settings of a particular Title
	
	.PARAMETER SeriesName
		Set the settings of a particular Series using its name and corresponding ChartArea. 
		The Series will be created if not found.
		If SeriesIndex is set, it will replace the Series' name if the Series does not exist
	
	.PARAMETER Enable3D
		The chart will be rendered in 3D.
	
	.PARAMETER Disable3D
		The chart will be rendered in 2D.	
	
	.PARAMETER AppendNew
		When this switch is used, a new ChartArea is added to Chart Control.

	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	
#>
	Param( #$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
	 	[ValidateNotNull()]
		[Parameter(Position=1,Mandatory=$true)]
  		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
		,
		[ValidateNotNull()]
		[Parameter(Position=2,Mandatory=$true)]
  		$XPoints
		,
		[Parameter(Position=3,Mandatory=$true)]
  		$YPoints
		,
		[Parameter(Position=4,Mandatory=$false)]
  		[string]$XTitle
		,
		[Parameter(Position=5,Mandatory=$false)]
  		[string]$YTitle
		,
		[Parameter(Position=6,Mandatory=$false)]
  		[string]$Title
		,
		[Parameter(Position=7,Mandatory=$false)]
  		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType
		,
		[Parameter(Position=8,Mandatory=$false)]
  		$SeriesIndex = -1
		,
		[Parameter(Position=9,Mandatory=$false)]
  		$TitleIndex = 0,
		[Parameter(Mandatory=$false)]
  		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew)

	$ChartAreaIndex = 0
	if($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name) 
		$SeriesIndex = $ChartControl.Series.Count - 1

		$Series.ChartArea = $ChartArea.Name
		
		if($Title)
		{
			$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1	
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
	}
	else
	{
		if($ChartControl.ChartAreas.Count -eq  0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}	
		
		if($ChartControl.Series.Count -eq 0)
		{
			if(-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName) 
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
				
			if($Series -eq $null)
			{
				if(($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}		
		}
	}
	
	if(($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if($Title)
	{
		if($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)

}


function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart

	.DESCRIPTION
		Use the function to remove contents from the chart control

	.PARAMETER  ChartControl
		The Chart Control to clear

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}
#endregion

#Call Load-DiskChart function to load the chart
function Load-DiskChart
{
	Param ( [Parameter(Position=1,Mandatory=$true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]$Chart)
	#Get Disk space using WMI and make sure it is an array
	$Disks = @(Get-WMIObject Win32_LogicalDisk -filter "DriveType=3" )
		
	#Remove all the current charts
	Clear-Chart $Chart 
	
	#Loop through each drive
	foreach($disk in $Disks)
	{	
		$UsedSpace =(($disk.size - $disk.freespace)/1gb)
		$FreeSpace = ($disk.freespace/1gb)

		#Load a Chart for each Drive
		Load-Chart $Chart -XPoints ("Used ({0:N1} GB)" -f $UsedSpace), ("Free Space ({0:N1} GB)" -f $FreeSpace) -YPoints $UsedSpace, $FreeSpace -ChartType "Pie" -Title ("Volume: {0} ({1:N1} GB)" -f $disk.VolumeName, ($disk.size/1gb) ) -Append	
	}
	
	#Set Custom Style
	foreach ($Series in $chartDiskSpace.Series)
	{
		$Series.CustomProperties = "PieDrawingStyle=Concave"
	}
}

$fadeIn_Load={
	#Start the Timer to Fade In
	$timerFadeIn.Start()
	$form1.Opacity = 0
}

$timerFadeIn_Tick={
	#Can you see me now?
	if($form1.Opacity -lt 1)
	{
		$form1.Opacity += 0.1
		
		if($form1.Opacity -ge 1)
		{
			#Stop the timer once we are 100% visible
			$timerFadeIn.Stop()
		}
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>